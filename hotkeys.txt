*hotkeys.txt*


Neovim и Vim - краткий справочник
https://neovim.io/doc/user/vimindex.html Официальная документация по всем комбинациям клавиш
https://vimhelp.org/ FAQ по vim
https://vim.fandom.com/wiki/Vim_Tips_Wiki - wiki по vim
============
СПИСОК РАЗДЕЛОВ
|t01|. Горячие клавиши Tmux
|z01|. Горячие клавиши sh/bash/zsh

|s01|. Новые
|s02|. Общее
|s03|. Перемещение курсора
|s04|. Режим вставки - вставка/добавление текста  
|s05|. Редактирование  
|s06|. Выделение текста (визуальный режим)  
|s07|. Визуальные команд
|s08|. Регистры в визуальном режим
|s09|. Специальные регистры в визуальном режиме
|s10|. Метки
|s11|. Макросы
|s12|. Вырезать и вставить (Копирование, Вставка)
|s13|. Отступы текста
|s14|. Выход и сохранение
|s15|. Поиск и замена
|s16|. Вкладки
|s17|. Работа с несколькими файлами
|s18|. Различия файлов
|s19|. Используемые плагины

*t01*. Горячие клавиши TMUX:
<C-b> <space> - Переключить панели вертикально\горизонтально, Select next layout
<C-b> PgUp - Перейти в режим прокрутки/выделения текста

*панели*
<C-b> Shift {}  - поменять местами панели
<C-b> x - закрыть активную панель (exit)
*окна*
<C-b> z - zoom active pane

<C-b> <C-Arrows> - увеличить уменьшить размер окна в высоту/ширину
<C-b> , - переименовать окно

*сессии*
<C-b> $ - rename session
<C-b> d - detach from session
<C-b> Shift+c - новая сессия
<C-b> Shfit-( - Следующая сессия
<C-b> g - поиск сессии

*Горячие_клавиши*

*s01* Новые (забытые)

_dd - удалить строку без копирования в буфер обмена
Shift+d - удалить до конца строки
u - отменить
Ctrl+r - восстановить (откатить) последнюю изменённую строку

Ctrl+e - ScrollDown - переместить (прокрутить) экран на одну строку вниз (без перемещения курсора)
Ctrl+y - ScrollUp - переместить (прокрутить) экран на одну строку вверх (без перемещения курсора)

Ctrl+o - открыть ранее открытый файл
g? - Справка по NvimTree
<leader>sk - смотреть сочетания клавиш
<leader>sr - открыть resent opened файл
S - удалить строку и заменить текст (то же, что cc)
e ~/.config/nvim/lua/custom/mappings.lua
g~w - инвертиреровать регистр слова под курсором
gUw - конвертировать слово под курсором в верхний регистр
guw - конвертировать слово под курсором в нижний регистр
<leader> fb - выбор открытого файла
Ctrl+e — переход к концу строки (zsh, bash))
Ctrl+a - переход к началу строки (zsh, bash)
Ctrl+n - убрать окно TreeSitter панель с деревом файлов
Ctrl+d - (page down)
Ctrl+u - (page up)
<leader> b - список открытых файлов
:e! - перезагрузит текущий файл с диска отменив изменения
<leader> fz - поиск функций в текущем буфере
<leader> th - выбор темы (тема записывается в ~/.config/nvim/lua/custom/chadrc.lua)
Shift+S - Удалить содержимое текущей строки и перейти в режим редактирования
2<Shift+S> - удалить 2 строки снизу и перейти в режим редактирование пустой строки
Ctrl +- - Масштаб (Увеличить/Уменьшить шрифт в Windows Terminal)
ge - перейти на конец предыдущего слова
g_ - перейти на последний непробельный символ строки
^ - перейти на первый непробельный символ строки

viw, vi()[]{}, vip - выделить слово под курсором, текст между скобок, параграф
vaw, va()[]{}, vap - выделить слово с ближайшим пробелом, тест со скобками, параграф с
новой строкой

yiw, yi()[]{}, yip - копировать слово под курсором, текст между скобками. параграф
yaw, ya()[]{}, yap - копировать слово с ближайшим пробелом, текст со скобками, параграф
с новой строкой

daw, di()[]{}, dap - удалить слово под курсором

Ctrl+4 - Toggle float terminal (не работает в Tmux)
<leader> t f - Toggle float terminal 
Alt+I - Toggle small float terminal

*s02*. Общее
:h[elp] keyword - открыть справку для ключевого слова keyword
:sav[eas] file - сохранить под названием file
:clo[se] - закрыть текущую панель
:ter[minal] - открыть окно терминала
K - открыть справочное руководство для слова под курсором
---Подсказка---
Выполните vimtutor в терминале, чтобы изучить первые команды Vim.

*s03*. Перемещение курсора
h - передвинуть курсор влево
j - передвинуть курсор вниз
k - передвинуть курсор вверх
l - передвинуть курсор вправо
gj - переместить курсор вниз (многострочный текст)
gk - переместить курсор вверх (многострочный текст)
H - (hight) H
M - (middle) - переместиться к середине экрана не меняя полжения курсора
L - (low) - переместиться к концу экрана 
w - переместиться вперед на начало слова
W - переместиться вперед на начало слова (слово может содержать пунктуацию)
e - переместиться вперед на конец слова
E - переместиться вперед на конец слова (слово может содержать пунктуацию)
b - переместиться назад на начало слова
B - переместиться назад на начало слова (слово может содержать пунктуацию)
ge - переместиться назад на конец слова
gE - переместиться назад на конец слова (слово может содержать пунктуацию)
% - перейти к соответствующему парному символу (по умолчанию 
    поддерживаемые пары: '()', '{}', '[]' - 
    используйте :h matchpairs в Vim для получения
0 - переместиться на начало строки
^ - переместиться на первый непробельный символ строки
$ - переместиться на конец строки
g_ - переместиться к последнему непустому символу в строке
gg - переместиться на первую строку документа
G - переместиться на последнюю строку документа
5gg or 5G - переместить на пятую строку
gd - переместиться к локальному объявлению
gD - переместиться к глобальному объявлению
fx - переместиться к следующему вхождению символа x
tx - переместиться перед следующим вхождением символа x
Fx - переместиться к предыдущему вхождению символа x
Tx - переместиться перед предыдущим вхождением символа x
; - повторить предыдущее перемещение f, t, F или T
, - повторить предыдущее перемещение f, t, F или T в обратном порядке
} - переместиться к следующему параграфу (или функции/блоку при редактировании кода)
{ - переместиться к предыдущему параграфу (или функции/блоку при редактировании кода)
zz - централизовать курсор на экране
zt - position cursor on top of the screen
zb - position cursor on bottom of the screen
Ctrl + e - ScrollDown - переместить экран на одну строку вниз (без перемещения курсора)
Ctrl + y - ScrollUp - переместить экран на одну строку вверх (без перемещения курсора)
Ctrl + b - (b)ack page - PgUp - переместиться назад на целый экран
Ctrl + f - (f)orward page - PgDown - переместиться вперед на целый экран
Ctrl + d - переместиться вперед на половину экрана
Ctrl + u - переместиться назад на половину экрана
---Подсказка---
Добавьте число перед командой перемещения курсора, чтобы повторить её. Например, 4j перемещает курсор на 4 строки вниз.

*s04*. Режим вставки - вставка/добавление текста
i - вставка перед курсором
I - вставка в начало строки
a - вставка (добавление) после курсора
A - вставка (добавление) в конец строки
o - добавление новой строки под текущей
O - добавление новой строки над текущей
ea - вставка (добавление) после конца слова
Ctrl + h - удалить символ перед курсором в режиме вставки
Ctrl + w - удалить слово перед курсором в режиме вставки
Ctrl + j - перейти на новую строку в режиме вставки
Ctrl + t - добавить один отступ строке (переместить вправо) в режиме вставки
Ctrl + d - убрать один отступ у строки (переместить влево) в режиме вставки
Ctrl + n - вставить (автозаполнить) следующее соответствие перед курсором в режиме вставки
Ctrl + p - вставить (автозаполнить) предыдущее соответствие перед курсором в режиме вставки
Ctrl + rx - вставить содержимое регистра x
Ctrl + ox - временно включить нормальный режим и выполнить команду нормального режима x.
Esc or Ctrl + c - выход из режима вставки

*s05*. Редактирование
r - заменить один символ
R - заменить несколько символов, до нажатия ESC.
J - присоединить нижнюю строку к текущей
gJ - присоединить нижнюю строку к текущей без пробела между ними
gwip - перекомпоновать азбац
g~ - инвертировать регистр в ходе перемещения курсора
gu - перевести в верхний регистр в ходе перемещения курсора
gU - перевести в нижний регистр в ходе перемещения курсора
cc - заменить всю строку
c$ or C - заменить до конца строки
ciw - изменить (заменить) всё слово
cw or ce - заменить до конца слова
s - удалить символ и заменить текст
S - удалить строку и заменить текст (то же, что cc)
xp - переставить две буквы (удалить и вставить)
u - отменить
U - восстановить (откатить) последнюю изменённую строку
Ctrl + r - повторить
. - повторить последнюю команду

*s06*. Выделение текста (визуальный режим)
v - включить режим выделения текста, выделить строки, затем выполнить команду (например, y-копирование)
V - включить построчный режим выделения
o - переместиться на другой конец выделенной области
Ctrl + v - включить режим выделения блоков
O - переместить на другой угол блока
aw - выделить слово
ab - блок в ()
aB - блок в {}
at - блок в <> тегах
ib - внутренний блок в ()
iB - внутренний блок в {}
it - внутренний блок в <> тегах
Esc or Ctrl + c - выйти из режима выделения текста
---Подсказка---
Вместо b и B также можно использовать ( и { соответственно.

*s07*. Визуальные команды
> - сместить текст вправо
< - сместить текст влево
y - скопировать выделенный текст
d - удалить выделенный текст
~ - переключить регистр
u - перевести выделенный текст в нижний регистр
U - перевести выделенный текст в верхний регистр

*s08*. Регистры в визуальном режиме
:reg[isters] - показать содержимое регистров
"xy - поместить содержимое в регистр x
"xp - вставить содержимое регистра x
"+y - скопировать в системный регистр буфера обмена
"+p - вставить из системного регистра буфера обмена
---Подсказка---
Содержимое регистров сохраняется в ~/.viminfo и восстанавливается при следующем запуске vim.
---Подсказка---

*s09*. Специальные регистры в визуальном режиме
0 - последнее копирование
" - безымянный регистр: последнее удаление или копирование
% - название текущего файла
# - название альтернативного файла
* - содержимое буфера обмена (первичный X11)
+ - содержимое буфера обмена (буфер обмена X11)
/ - последний поисковый паттерн
: - последняя команда
. - последний вставленный текст
- - последнее небольшое (меньшее, чем строка) удаление
= - регистр, возвращающий значение выражения
_ - регистр чёрной дыры

 *s10*. Метки
```
:marks - список меток
ma - установить метку A на текущей позиции
`a - переместиться к метке A
y`a - скопировать до метки A
`0 - переместиться на позицию, на которой Vim в последний раз был закрыт
`" - переместиться на позицию, на которой был закрыт в последний раз данный файл
`. - переместиться на позицию последнего изменения данного файла
`` - переместиться на позицию перед последним переходом
:ju[mps] - открыть список переходов
Ctrl + i - перейти к более новому переходу в списке переходов
Ctrl + o - перейти к более старому переходу в списке переходов
:changes - открыть список изменений
g, - перейти к более новому изменению в списке изменений
g; - перейти к более старому изменению в списке изменений
Ctrl + ] - перейти к тегу под курсором
---Подсказка---
Для перехода к отметке вы можете использовать как знак побочного ударения (`), так и апостроф ('). Использование апострофа переводит к началу (первой непустой) строки, содержащей отметку.
``` 

*s11*. Макросы
qa - записать макрос A
q - остановить запись макроса
@a - выполнить макрос A
@@ - выполнить последний макрос

*s12*. Вырезать и вставить (Копирование, Вставка)
yip - скопировать параграф (функцию в которой курсор)
dip - удалить параграф (функцию в которой курсор)
vi( - выделить текст внутри круглых скобок
vi[ - выделить текст [внутри квадратных скобок]

diw - (delete inside word) удалить (вырезать) слово под курсором
daw - (delete around word) удалить (вырезать) слово под курсором и пространство перед или после него

yy - скопировать строку
2yy - скопировать 2 строки
yw - скопировать слово
yiw - скопировать слово под курсором
yaw - скопировать слово под курсором и пространство перед или после него
y$ or Y - скопировать до конца строки
p - вставить буфер обмена после курсора
P - вставить буфер обмена перед курсором
gp - вставить буфер обмена после курсора и переместить курсор после вставленного текста
gP - вставить буфер обмена перед курсором и переместить курсор после вставленного текста
dd - удалить (вырезать) строку
2dd - удалить (вырезать) 2 строки
dw - удалить (вырезать) слово
:3,5d - delete lines starting from 3 to 5
---Подсказка---
You can also use the following characters to specify the range:
e.g.
:.,$d - From the current line to the end of the file
:.,1d - From the current line to the beginning of the file
:10,$d - From the 10th line to the beginning of the file
:g/{pattern}/d - delete all lines containing pattern
:g!/{pattern}/d - delete all lines not containing pattern
d$ or D - удалить (вырезать) до конца строки
x - удалить (вырезать) символ
 
*s13*. Отступы текста
>> - добавить один отступ строке (переместить вправо)
<< - убрать один отступ у строки (переместить влево)
>% - добавить один отступ блоку в () или {}
<% - de-indent a block with () or {} (cursor on brace)
>ib - изменить отступ внутреннему блоку в ()
>at - изменить отступ блоку в <> тегах
3== - выровнить отступы 3-х строк
=% - выровнить отступы блока в () или {}
=iB - выровнить отступы блока в {}
gg=G - выровнить оступы всего буфера
]p - вставить и выровнить отступы по строке под курсором

*s14*. Выход и сохранение
:w - сохранить файл, но не выходить
:w !sudo tee % - сохранить файл с sudo
:wq or :x or ZZ - сохранить файл и выйти
:q - выйти (терпит неудачу в случае несохраненных изменений)
:q! or ZQ - выйти без сохранения
wqa - записать (сохранить) и выйти во всех вкладках и буферах

*s15* Поиск и замена
/pattern - поиск шаблона  
?pattern - обратный поиск шаблона
\vpattern - 'very magic' режим: все не алфавитно-цифровые символы интерпретируются как специальные (экранирование не требуется)
n - повторить поиск в том же направлении
N - повторить поиск в обратном направлении
:%s/old/new/g - заменить все вхождения шаблона в файл на указанное значение
:%s/old/new/gc - заменить все вхождения шаблона в файле на указанное значение с подтверждением
:noh[lsearch] - отключить подсвечивание результатов поиска
Поиск в нескольких файлах
:vim[grep] /pattern/ {`{file}`} - поиск по шаблону в нескольких файлах
e.g. :vim[grep] /foo/ **/*
:cn[ext] - переместиться к следующему совпадению
:cp[revious] - переместиться к предыдущему совпадению
:cope[n] - открыть окно со списком результатов
:ccl[ose] - закрыть окно со списком результатов

*s16*. Вкладки
:tabnew or :tabnew {page.words.file} - открыть файл в новой вкладке
Ctrl + wT - переместить текущее окно в собственную вкладку
gt or :tabn[ext] - переключиться на следующую вкладку
gT or :tabp[revious] - переключиться на предыдущую вкладку
#gt - переключиться на вкладку с номером #
:tabm[ove] # - переместить текущую вкладку на # позицию (нумерация с 0)
:tabc[lose] - закрыть текущую вкладку и все её окна
:tabo[nly] - закрыть все вкладки, кроме текущей
:tabdo command - выполнить command на всех вкладках (к примеру, :tabdo q закрывает все открытые вкладки)

*s17*. Работа с несколькими файлами
:e[dit] file - редактировать файл в новом буфере
:bn[ext] - перейти к следующему буферу
:bp[revious] - перейти к предыдущему буферу
:bd[elete] - удалить буфер (закрыть файл)
:b[uffer]# - перейти к буферу по номеру #
:b[uffer] file - перейти к буферу по имени файла
:ls or :buffers - список всех открытых буферов
:sp[lit] file - открыть файл в новом буфере и разделить окно
:vs[plit] file - открыть файл в новом буфере и вертикально разделить окно
:vert[ical] ba[ll] - развернуть все буферы как вертикальные окна
:tab ba[ll] - развернуть все буферы как вкладки
Ctrl + ws - разделить окно
Ctrl + wv - разделить окно вертикально
Ctrl + ww - переключение окон
Ctrl + wq - закрыть окно
Ctrl + wx - поменять местами текущее окно со следующим
Ctrl + w= - сделать все окна одинаковой высоты и ширины
Ctrl + wh - переместить курсор в левое окно (вертикально разделение)
Ctrl + wl - переместить курсор в правое окно (вертикальное разделение)
Ctrl + wj - переместить курсор в окно ниже (горизонтальное разделение)
Ctrl + wk - переместить курсор в окно выше (горизонтальное разделение)
Ctrl + wH - сделать текущее окно максимальным по высоте и крайним слева (самым левым вертикальным окном)
Ctrl + wL - сделать текущее окно максимальным по высоте и крайним справа (самым правым вертикальным окном)
Ctrl + wJ - сделать текущее окно максимальным по ширине и крайним снизу (самым нижним горизонтальным окном)
Ctrl + wK - сделать текущее окно максимальным по ширине и крайним сверху (самым верхним горизонтальным окном)

*s18*. Различия файлов (diff)
zf - вручную определить свёртку в ходе перемещения курсора
zd - удалить свёртку под курсором
za - переключить состояние свёртки под курсором
zo - раскрыть свёртку под курсором
zc - свернуть свёртку под курсором
zr - раскрыть все свёртки на один уровень
zm - свернуть все свёртки на один уровень
zi - переключить состояния всех свёрток в буфере
]c - перейти к началу следующего отличия
[c - перейти к началу предыдущего отличия
do or :diffg[et] - скопировать отличия (из другого буфера)
dp or :diffpu[t] - вставить отличия (в другой буфер)
:diffthis - сделать текущее окно частью окна сравнения
:dif[fupdate] - обновить отличия
:diffo[ff] - выключить режим сравнения для текущего окна
---Подсказка---
Команды для свёрток (например, za) работают на одном уровне вложенности. Чтобы работать на всех уровнях, используйте заглавные буквы (например, zA).
---Подсказка---
Чтобы увидеть различия файлов, можно напрямую запустить Vim в режиме сравнения, выполнив в терминале vimdiff. Можно даже установить его как git difftool.

*s19*. Использованные плагины
============
Менеджер плагинов: https://github.com/junegunn/vim-plug; большая часть плагинов взята с vimawesome.
Менеджер сессий - vim-startify;
Дерево файлов - NerdTree;
Поиск по файлам (предположительно, проекта) - ctrlsf;
Открытие файла по нечёткому имени - fzf;
Получение всех ярлыков документа в одной панели (читай, имена функций, переменных и прочего) - tagbar;
Панель состояния (снизу) - lunaline;
Цветовая схема редактора - cattppuccine;
Автокомплит (и ещё много полезных фишек) - coc (плюс расширения coc-json, coc-tsserver);
Мультикурсор (это вообще довольно жирная тема, там много надо в справку вникать, чтобы эффективней использовать) - vim-visual-multi;
Обёртывание текста - surround-vim;
Управлением быстрым закомментированием кода - NERD Commenter;
Подсветка цветов в HEX режиме - nvim-colorizer;
Быстрая генерация HTML - Emmet;


*z01* Горячие клавиши sh/bash/zsh

Перемещение курсора:

Ctrl + A - Перейти к началу строки.
Ctrl + E - Перейти к концу строки.
Ctrl + F - Переместить курсор вправо на один символ (аналог стрелки вправо).
Ctrl + B - Переместить курсор влево на один символ (аналог стрелки влево).
Alt + F - Переместить курсор вправо на одно слово.
Alt + B - Переместить курсор влево на одно слово.

Ctrl + a — переход в начало строки (cisco, csh, zsh)
Ctrl + b — переход на 1 символ назад (cisco, csh, zsh)
Ctrl + c — посылает программе SIGINT. Обычно, прерывает текущее задание (csh, zsh)
Ctrl + d — удаляет символ под курсором (аналог delete) (cisco, csh, zsh)
Ctrl + e — переход к концу строки (cisco, csh, zsh)
Ctrl + f — переход на 1 символ вперёд (cisco, csh, zsh)
Ctrl + k — удаляет всё, до конца строки (EOL, а не на экране!) (cisco, csh, zsh)
Ctrl + l — очищает экран. Аналог команды clear. (csh, zsh)
Ctrl + r — поиск по истории. Повторение поиска (листание результатов поиска). То есть инкрементальный поиск. (zsh)
Ctrl + j — прекращает поиск и позволяет отредактировать найденную команду. Если поиск не производился, то аналогично нажатию return. (в zsh выполняет команду)
Ctrl + t — меняет символ под курсором на предыдущий. Или, если хотите, тянет предыдущий символ к концу строки. (cisco, csh, zsh)
Ctrl + u — удаляет все символы слева от курсора до начала строки. (cisco, в csh, zsh удаляет всю строку)
Ctrl + w — удаляет символы слева от курсора до начала слова. (cisco, csh, zsh)
Ctrl + xx — переходит от текущей позиции курса в начало строки и обратно. На циске работает аналогично ctrl + u. (csh)
Ctrl + x @ — показывает возможные дополнения имени хоста (имена берутся из /etc/hosts)
Ctrl + z — suspend'ит текущую задачу (csh, zsh)
Ctrl + x; Ctrl + e — открывает $EDITOR для изменения введённой строки. После сохранения изменений, команда отправляется на исполнение. Если переменная не задана, то открывается системный текстовый редактор (для линукса это, зачастую, nano)

Теперь немного о сочетаниях с альтом.

Alt + < — переход к первой команде в истории команд (zsh)
Alt + > — переход к последней команде в истории
Alt +? — показывает список возможных дополнений команды(аналогично tab-tab) (в csh, zsh аналог which string)
Alt + * — вставляет все возможные дополнений команды в строку команд
Alt + / — пытается дополнить имя файла (аналогично табуляции)
Alt +. — вставляет последний аргумент предыдущей команды (аналог !$, только не надо делать :p, чтобы проверить )
Alt + b — сдвигает курсор влево на 1 слово (cisco, csh, zsh)
Alt + c — делает букву под курсором большой, а остальные, до конца слова, маленькими. (cisco, csh, zsh)
Alt + d — удаляет символы с текущей позиции курсора и до конца слова. (cisco, csh, zsh)
Alt + f — передвигает курсор на одно слово вперёд (cisco, csh, zsh)
Alt + l — делает все буквы с текущей позиции курсора и до конца слова маленькими (cisco, csh, zsh)
Alt + t — меняет местами слова под курсором и предыдущее (zsh)
Alt + u — переводит буквы с текущей позиции курсора и до конца слова в верхний регистр (cisco, csh, zsh)
Alt + back-space — удаляет символы с текущей позиции курсора до начала слова (cisco, csh, zsh)

В следующем абзаце я, для краткости, буду писать «2Т» чтобы обозначить двойное нажатие табуляции.

2T — дополнение команды. Если нажать при пустой строке — выведет список всех доступных команд
(string)2T — выведет список возможных дополнений
(dir)2T — покажет подпапки папки dir
*2T — покажет подпапки исключая скрытые (имена которых начинаются с точки)
~2T — выведет всех пользователей из /etc/passwd. Дополнив имя пользователя можно перейти в его домашний каталог. Например ~oxpa/ — домашний каталог пользователя oxpa
$2T — выводит список дополнений для системных переменных
@2T — дополняет имена хостов содержащимися в /etc/hosts
=2T — листинг текущей директории, аналогичный ls.

============================================================
vim:tw=78:ts=8:noet:ft=help:norl:
